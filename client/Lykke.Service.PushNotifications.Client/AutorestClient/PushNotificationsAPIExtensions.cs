// Code generated by Microsoft (R) AutoRest Code Generator 1.2.2.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Lykke.Service.PushNotifications.Client.AutorestClient
{
    using Lykke.Service;
    using Lykke.Service.PushNotifications;
    using Lykke.Service.PushNotifications.Client;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for PushNotificationsAPI.
    /// </summary>
    public static partial class PushNotificationsAPIExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            public static ErrorResponse ApiAppNotificationsSendDataNotificationToAllDevicesPost(this IPushNotificationsAPI operations, DataNotificationModel model = default(DataNotificationModel))
            {
                return operations.ApiAppNotificationsSendDataNotificationToAllDevicesPostAsync(model).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorResponse> ApiAppNotificationsSendDataNotificationToAllDevicesPostAsync(this IPushNotificationsAPI operations, DataNotificationModel model = default(DataNotificationModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAppNotificationsSendDataNotificationToAllDevicesPostWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            public static ErrorResponse ApiAppNotificationsSendTextNotificationPost(this IPushNotificationsAPI operations, TextNotificationModel model = default(TextNotificationModel))
            {
                return operations.ApiAppNotificationsSendTextNotificationPostAsync(model).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorResponse> ApiAppNotificationsSendTextNotificationPostAsync(this IPushNotificationsAPI operations, TextNotificationModel model = default(TextNotificationModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAppNotificationsSendTextNotificationPostWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            public static ErrorResponse ApiAppNotificationsSendPushTxDialogPost(this IPushNotificationsAPI operations, PushTxDialogModel model = default(PushTxDialogModel))
            {
                return operations.ApiAppNotificationsSendPushTxDialogPostAsync(model).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorResponse> ApiAppNotificationsSendPushTxDialogPostAsync(this IPushNotificationsAPI operations, PushTxDialogModel model = default(PushTxDialogModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAppNotificationsSendPushTxDialogPostWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            public static ErrorResponse ApiAppNotificationsSendAssetsCreditedNotificationPost(this IPushNotificationsAPI operations, AssetsCreditedModel model = default(AssetsCreditedModel))
            {
                return operations.ApiAppNotificationsSendAssetsCreditedNotificationPostAsync(model).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorResponse> ApiAppNotificationsSendAssetsCreditedNotificationPostAsync(this IPushNotificationsAPI operations, AssetsCreditedModel model = default(AssetsCreditedModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAppNotificationsSendAssetsCreditedNotificationPostWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            public static ErrorResponse ApiAppNotificationsSendRawNotificationPost(this IPushNotificationsAPI operations, RawNotificationModel model = default(RawNotificationModel))
            {
                return operations.ApiAppNotificationsSendRawNotificationPostAsync(model).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorResponse> ApiAppNotificationsSendRawNotificationPostAsync(this IPushNotificationsAPI operations, RawNotificationModel model = default(RawNotificationModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAppNotificationsSendRawNotificationPostWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Checks service is alive
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object ApiIsAliveGet(this IPushNotificationsAPI operations)
            {
                return operations.ApiIsAliveGetAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Checks service is alive
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ApiIsAliveGetAsync(this IPushNotificationsAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiIsAliveGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
