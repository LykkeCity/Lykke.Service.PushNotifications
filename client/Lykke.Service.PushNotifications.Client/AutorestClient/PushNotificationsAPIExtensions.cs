// Code generated by Microsoft (R) AutoRest Code Generator 1.2.2.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Lykke.Service.PushNotifications.Client.AutorestClient
{
    using Lykke.Service;
    using Lykke.Service.PushNotifications;
    using Lykke.Service.PushNotifications.Client;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for PushNotificationsAPI.
    /// </summary>
    public static partial class PushNotificationsAPIExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            public static ErrorResponse SendDataNotificationToAllDevices(this IPushNotificationsAPI operations, DataNotificationModel model = default(DataNotificationModel))
            {
                return operations.SendDataNotificationToAllDevicesAsync(model).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorResponse> SendDataNotificationToAllDevicesAsync(this IPushNotificationsAPI operations, DataNotificationModel model = default(DataNotificationModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SendDataNotificationToAllDevicesWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            public static ErrorResponse SendTextNotification(this IPushNotificationsAPI operations, TextNotificationModel model = default(TextNotificationModel))
            {
                return operations.SendTextNotificationAsync(model).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorResponse> SendTextNotificationAsync(this IPushNotificationsAPI operations, TextNotificationModel model = default(TextNotificationModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SendTextNotificationWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            public static ErrorResponse SendPushTxDialog(this IPushNotificationsAPI operations, PushTxDialogModel model = default(PushTxDialogModel))
            {
                return operations.SendPushTxDialogAsync(model).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorResponse> SendPushTxDialogAsync(this IPushNotificationsAPI operations, PushTxDialogModel model = default(PushTxDialogModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SendPushTxDialogWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            public static ErrorResponse SendAssetsCreditedNotification(this IPushNotificationsAPI operations, AssetsCreditedModel model = default(AssetsCreditedModel))
            {
                return operations.SendAssetsCreditedNotificationAsync(model).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorResponse> SendAssetsCreditedNotificationAsync(this IPushNotificationsAPI operations, AssetsCreditedModel model = default(AssetsCreditedModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SendAssetsCreditedNotificationWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            public static ErrorResponse SendRawNotification(this IPushNotificationsAPI operations, RawNotificationModel model = default(RawNotificationModel))
            {
                return operations.SendRawNotificationAsync(model).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorResponse> SendRawNotificationAsync(this IPushNotificationsAPI operations, RawNotificationModel model = default(RawNotificationModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SendRawNotificationWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Checks service is alive
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object IsAlive(this IPushNotificationsAPI operations)
            {
                return operations.IsAliveAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Checks service is alive
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> IsAliveAsync(this IPushNotificationsAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IsAliveWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
