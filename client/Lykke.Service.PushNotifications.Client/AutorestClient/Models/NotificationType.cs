// Code generated by Microsoft (R) AutoRest Code Generator 1.2.2.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Lykke.Service.PushNotifications.Client.AutorestClient.Models
{
    using Lykke.Service;
    using Lykke.Service.PushNotifications;
    using Lykke.Service.PushNotifications.Client;
    using Lykke.Service.PushNotifications.Client.AutorestClient;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for NotificationType.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum NotificationType
    {
        [EnumMember(Value = "Info")]
        Info,
        [EnumMember(Value = "KycSucceess")]
        KycSucceess,
        [EnumMember(Value = "KycRestrictedArea")]
        KycRestrictedArea,
        [EnumMember(Value = "KycNeedToFillDocuments")]
        KycNeedToFillDocuments,
        [EnumMember(Value = "TransctionFailed")]
        TransctionFailed,
        [EnumMember(Value = "TransactionConfirmed")]
        TransactionConfirmed,
        [EnumMember(Value = "AssetsCredited")]
        AssetsCredited,
        [EnumMember(Value = "BackupWarning")]
        BackupWarning,
        [EnumMember(Value = "EthNeedTransactionSign")]
        EthNeedTransactionSign,
        [EnumMember(Value = "PositionOpened")]
        PositionOpened,
        [EnumMember(Value = "PositionClosed")]
        PositionClosed,
        [EnumMember(Value = "MarginCall")]
        MarginCall,
        [EnumMember(Value = "OffchainRequest")]
        OffchainRequest,
        [EnumMember(Value = "NeedTransactionSign")]
        NeedTransactionSign,
        [EnumMember(Value = "PushTxDialog")]
        PushTxDialog,
        [EnumMember(Value = "LimitOrderEvent")]
        LimitOrderEvent,
        [EnumMember(Value = "LiveAvailable")]
        LiveAvailable,
        [EnumMember(Value = "ClientDialog")]
        ClientDialog,
        [EnumMember(Value = "OperationCreated")]
        OperationCreated
    }
    internal static class NotificationTypeEnumExtension
    {
        internal static string ToSerializedValue(this NotificationType? value)  =>
            value == null ? null : ((NotificationType)value).ToSerializedValue();

        internal static string ToSerializedValue(this NotificationType value)
        {
            switch( value )
            {
                case NotificationType.Info:
                    return "Info";
                case NotificationType.KycSucceess:
                    return "KycSucceess";
                case NotificationType.KycRestrictedArea:
                    return "KycRestrictedArea";
                case NotificationType.KycNeedToFillDocuments:
                    return "KycNeedToFillDocuments";
                case NotificationType.TransctionFailed:
                    return "TransctionFailed";
                case NotificationType.TransactionConfirmed:
                    return "TransactionConfirmed";
                case NotificationType.AssetsCredited:
                    return "AssetsCredited";
                case NotificationType.BackupWarning:
                    return "BackupWarning";
                case NotificationType.EthNeedTransactionSign:
                    return "EthNeedTransactionSign";
                case NotificationType.PositionOpened:
                    return "PositionOpened";
                case NotificationType.PositionClosed:
                    return "PositionClosed";
                case NotificationType.MarginCall:
                    return "MarginCall";
                case NotificationType.OffchainRequest:
                    return "OffchainRequest";
                case NotificationType.NeedTransactionSign:
                    return "NeedTransactionSign";
                case NotificationType.PushTxDialog:
                    return "PushTxDialog";
                case NotificationType.LimitOrderEvent:
                    return "LimitOrderEvent";
                case NotificationType.LiveAvailable:
                    return "LiveAvailable";
                case NotificationType.ClientDialog:
                    return "ClientDialog";
                case NotificationType.OperationCreated:
                    return "OperationCreated";
            }
            return null;
        }

        internal static NotificationType? ParseNotificationType(this string value)
        {
            switch( value )
            {
                case "Info":
                    return NotificationType.Info;
                case "KycSucceess":
                    return NotificationType.KycSucceess;
                case "KycRestrictedArea":
                    return NotificationType.KycRestrictedArea;
                case "KycNeedToFillDocuments":
                    return NotificationType.KycNeedToFillDocuments;
                case "TransctionFailed":
                    return NotificationType.TransctionFailed;
                case "TransactionConfirmed":
                    return NotificationType.TransactionConfirmed;
                case "AssetsCredited":
                    return NotificationType.AssetsCredited;
                case "BackupWarning":
                    return NotificationType.BackupWarning;
                case "EthNeedTransactionSign":
                    return NotificationType.EthNeedTransactionSign;
                case "PositionOpened":
                    return NotificationType.PositionOpened;
                case "PositionClosed":
                    return NotificationType.PositionClosed;
                case "MarginCall":
                    return NotificationType.MarginCall;
                case "OffchainRequest":
                    return NotificationType.OffchainRequest;
                case "NeedTransactionSign":
                    return NotificationType.NeedTransactionSign;
                case "PushTxDialog":
                    return NotificationType.PushTxDialog;
                case "LimitOrderEvent":
                    return NotificationType.LimitOrderEvent;
                case "LiveAvailable":
                    return NotificationType.LiveAvailable;
                case "ClientDialog":
                    return NotificationType.ClientDialog;
                case "OperationCreated":
                    return NotificationType.OperationCreated;
            }
            return null;
        }
    }
}
